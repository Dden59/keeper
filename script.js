let baseBet = 100;
let currentBet = 100;
let balance = 1000;
let winStreak = 0;
let loseStreak = 0;
let greedLevel = 0;
let gameStarted = false;
let totalProfitTarget = 0;

const greedBar = document.getElementById("greedBar");
const currentBetDisplay = document.getElementById("currentBet");
const currentBalanceDisplay = document.getElementById("currentBalance");
const notifications = document.getElementById("notifications");

function updateGreedBar() {
    greedBar.style.setProperty("--greed", `${greedLevel}%`);
    greedBar.style.setProperty("width", `${greedLevel}%`);
}

function showNotification(msg) {
    notifications.innerText = msg;
    notifications.style.display = "block";
    setTimeout(() => {
        notifications.style.display = "none";
    }, 3500);
}

function calculateNextBet(losses, targetProfit) {
    return Math.ceil((targetProfit + (baseBet * losses)) / 0.5);
}

function resetGame() {
    gameStarted = false;
    winStreak = 0;
    loseStreak = 0;
    greedLevel = 0;
    notifications.innerText = "";
    document.getElementById("gameSection").style.display = "none";
}

document.getElementById("startBtn").addEventListener("click", () => {
    baseBet = parseFloat(document.getElementById("baseBet").value);
    balance = parseFloat(document.getElementById("balance").value);
    currentBet = baseBet;
    totalProfitTarget = balance;

    document.getElementById("gameSection").style.display = "block";
    updateDisplay();
    gameStarted = true;
});

document.getElementById("winBtn").addEventListener("click", () => {
    if (!gameStarted) return;

    const profit = currentBet * 1.5;
    balance += profit;
    winStreak++;
    loseStreak = 0;

    if (greedLevel > 0) greedLevel -= 10;
    updateGreedBar();

    totalProfitTarget = balance;

    if (winStreak === 2) showNotification("–£ —Ç–µ–±—è —Ö–æ—Ä–æ—à–æ –ø–æ–ª—É—á–∞–µ—Ç—Å—è, –ø—Ä–æ–¥–æ–ª–∂–∞–π –≤ —Ç–æ–º –∂–µ –¥—É—Ö–µüëç");
    if (winStreak === 3) showNotification("–ì–æ—Ä–∂—É—Å—å —Ç–æ–±–æ–π üòá");
    if (winStreak === 4) showNotification("–ü—Ä–∏—Å—Ç–µ–≥–Ω–∏ —Ä–µ–º–Ω–∏, –º—ã –≤–∑–ª–µ—Ç–∞–µ–ºüöÄ");
    if (winStreak === 5) showNotification("–ö—É–¥–∞ –ø–æ—Ç—Ä–∞—Ç–∏–º –¥–µ–Ω—å–≥–∏? üòÇ");

    currentBet = baseBet;
    updateDisplay();
});

document.getElementById("loseBtn").addEventListener("click", () => {
    if (!gameStarted) return;

    balance -= currentBet;
    loseStreak++;
    winStreak = 0;

    if (greedLevel < 100) greedLevel += 10;
    updateGreedBar();

    if (loseStreak === 2) showNotification("–ù–∏—á–µ–≥–æ —Å—Ç—Ä–∞—à–Ω–æ–≥–æ, —è –≤–µ—Ä—é –≤ —Ç–µ–±—è ü•∫");
    if (loseStreak === 3) showNotification("–°–¥–µ–ª–∞–π –ø–∞—É–∑—É –Ω–∞ –∫–æ—Ñ–µ ‚òïÔ∏è");
    if (loseStreak === 4) showNotification("–í—ã—Å–æ–∫–∏–π —Ä–∏—Å–∫ —Å–ª–∏—Ç—å –±–∞–ª–∞–Ω—Å!");

    if (balance <= 0) {
        showNotification("–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è —Å—Ç–∞–≤–∫–∏ üò≠");
        return;
    }

    let nextBet = calculateNextBet(loseStreak, totalProfitTarget - balance);
    if (nextBet > balance) {
        showNotification("–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è —Å—Ç–∞–≤–∫–∏ üò≠");
        return;
    }

    currentBet = nextBet;
    updateDisplay();
});

function updateDisplay() {
    currentBetDisplay.textContent = currentBet.toFixed(2);
    currentBalanceDisplay.textContent = balance.toFixed(2);

    if (balance < baseBet * 3) {
        showNotification("–û—Å—Ç–∞–ª–æ—Å—å –º–∞–ª–æ –ø–æ–ø—ã—Ç–æ–∫.");
    }
}

document.getElementById("resetBtn").addEventListener("click", () => {
    window.location.reload();
});
