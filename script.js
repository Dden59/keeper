let balance = 0;
let baseBet = 0;
let currentBet = 0;
let losses = 0;
let wins = 0;
let greedLevel = 0;

const balanceInput = document.getElementById('balance');
const betInput = document.getElementById('bet');
const resultBox = document.getElementById('result');
const greedFill = document.getElementById('greed-fill');
const statusMsg = document.getElementById('status-message');

function calculateRecommendedBet(balance) {
  // –†–∞—Å—á–µ—Ç —Å—Ç–∞–≤–∫–∏, —á—Ç–æ–±—ã –ø–µ—Ä–µ–∫—Ä—ã—Ç—å 6 –ø—Ä–æ–∏–≥—Ä—ã—à–µ–π –ø–æ–¥—Ä—è–¥ –ø—Ä–∏ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–µ 1.5x
  let bet = 1;
  let total = 0;
  for (let i = 0; i < 6; i++) {
    total += bet;
    bet *= 2;
  }
  return Math.floor(balance / total);
}

function startGame() {
  balance = parseInt(balanceInput.value);
  if (isNaN(balance) || balance < 100) {
    alert("–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –±–∞–ª–∞–Ω—Å (–æ—Ç 100‚ÇΩ)");
    return;
  }
  baseBet = calculateRecommendedBet(balance);
  betInput.value = baseBet;
  currentBet = baseBet;
  losses = 0;
  wins = 0;
  greedLevel = 0;
  updateGreedBar();
  resultBox.innerText = `–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º–∞—è —Å—Ç–∞–≤–∫–∞: ${baseBet}‚ÇΩ (—Ö–≤–∞—Ç–∞–µ—Ç –Ω–∞ 6 –ø—Ä–æ–∏–≥—Ä—ã—à–µ–π –ø–æ–¥—Ä—è–¥ –ø—Ä–∏ 1.5x)`;
  statusMsg.innerText = "–ì–æ—Ç–æ–≤–æ –∫ —Å—Ç–∞—Ä—Ç—É üöÄ";
}

function updateGreedBar() {
  let level = Math.min((losses / 6) * 100, 100);
  greedFill.style.width = `${level}%`;
}

function handleWin() {
  balance += currentBet * 0.5; // –ø–æ—Ç–æ–º—É —á—Ç–æ –≤—ã–∏–≥—Ä—ã—à –Ω–∞ 1.5x
  wins++;
  losses = 0;
  currentBet = baseBet;
  updateGreedBar();
  updateStatus("win");
  showResult(`–í—ã–∏–≥—Ä—ã—à! –ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: ${Math.round(balance)}‚ÇΩ`);
}

function handleLoss() {
  balance -= currentBet;
  losses++;
  currentBet = calculateRecoveryBet();
  updateGreedBar();
  updateStatus("loss");

  if (balance <= 0) {
    showResult("–ë–∞–ª–∞–Ω—Å –∏—Å—á–µ—Ä–ø–∞–Ω üò¢");
    statusMsg.innerText = "–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è —Å—Ç–∞–≤–∫–∏ üò≠";
    return;
  }

  if (currentBet > balance) {
    showResult(`–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ —Å–ª–µ–¥—É—é—â—É—é —Å—Ç–∞–≤–∫—É: ${currentBet}‚ÇΩ`);
    statusMsg.innerText = "–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è —Å—Ç–∞–≤–∫–∏ üò≠";
    return;
  }

  showResult(`–ü—Ä–æ–∏–≥—Ä—ã—à. –°–ª–µ–¥—É—é—â–∞—è —Å—Ç–∞–≤–∫–∞: ${currentBet}‚ÇΩ`);
}

function calculateRecoveryBet() {
  let neededProfit = wins * baseBet * 0.5 + losses * baseBet;
  for (let bet = baseBet; bet < balance; bet++) {
    let totalLoss = 0;
    let b = bet;
    for (let i = 0; i < losses; i++) {
      totalLoss += b;
      b *= 2;
    }
    if ((b * 1.5) - totalLoss >= neededProfit) return Math.ceil(b);
  }
  return baseBet;
}

function showResult(message) {
  resultBox.innerText = message;
}

function resetGame() {
  balance = 0;
  baseBet = 0;
  currentBet = 0;
  losses = 0;
  wins = 0;
  betInput.value = "";
  balanceInput.value = "";
  greedFill.style.width = "0%";
  resultBox.innerText = "";
  statusMsg.innerText = "–°–±—Ä–æ—Å –≤—ã–ø–æ–ª–Ω–µ–Ω.";
}

function updateStatus(result) {
  if (result === "win") {
    const messages = [
      "–£ —Ç–µ–±—è —Ö–æ—Ä–æ—à–æ –ø–æ–ª—É—á–∞–µ—Ç—Å—è, –ø—Ä–æ–¥–æ–ª–∂–∞–π –≤ —Ç–æ–º –∂–µ –¥—É—Ö–µ üëç",
      "–ì–æ—Ä–∂—É—Å—å —Ç–æ–±–æ–π üòá",
      "–ü—Ä–∏—Å—Ç–µ–≥–Ω–∏ —Ä–µ–º–Ω–∏, –º—ã –≤–∑–ª–µ—Ç–∞–µ–º üöÄ",
      "–ö—É–¥–∞ –ø–æ—Ç—Ä–∞—Ç–∏–º –¥–µ–Ω—å–≥–∏? üòÇ"
    ];
    if (wins <= messages.length)
      statusMsg.innerText = messages[wins - 1];
  } else {
    const messages = [
      "–ù–∏—á–µ–≥–æ —Å—Ç—Ä–∞—à–Ω–æ–≥–æ, —è –≤–µ—Ä—é –≤ —Ç–µ–±—è ü•∫",
      "–°–¥–µ–ª–∞–π –ø–∞—É–∑—É –Ω–∞ –∫–æ—Ñ–µ ‚òïÔ∏è",
      "–í—ã—Å–æ–∫–∏–π —Ä–∏—Å–∫ —Å–ª–∏—Ç—å –±–∞–ª–∞–Ω—Å!"
    ];
    if (losses <= messages.length)
      statusMsg.innerText = messages[losses - 1];
  }

  if (balance <= baseBet * 2) {
    statusMsg.innerText = "–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è —Å—Ç–∞–≤–∫–∏ üò≠";
  }
}
